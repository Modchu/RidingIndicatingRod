package modchu.ridingindicatingrod;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.util.ArrayList;import java.util.List;import modchu.lib.Modchu_Config;import net.minecraft.client.Minecraft;import net.minecraft.creativetab.CreativeTabs;import net.minecraft.item.Item;import net.minecraft.item.ItemStack;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.registry.GameRegistry;import cpw.mods.fml.common.registry.LanguageRegistry;@Mod(modid="RidingIndicatingRod", name="RidingIndicatingRod", version="2")public class RidingIndicatingRod {	public static int ridingIndicatingRodID = 17660;	public static boolean useAddChatMessage = true;	public static boolean useOriginalIcon = true;	public static Item itemRidingIndicatingRod;	private static boolean DebugMessage = true;	private static RidingIndicatingRod ridingIndicatingRodInstance;	private static final File cfgdir = new File(Minecraft.getMinecraft().mcDataDir, "/config/");	private static File whiteListfile = new File(cfgdir, ("RidingIndicatingRod_whiteList.cfg"));	private static File ngListfile = new File(cfgdir, ("RidingIndicatingRod_NGList.cfg"));	public static List<String> whiteList = new ArrayList<String>();	public static List<String> ngList = new ArrayList<String>();	private static File mainCfgfile = new File(cfgdir, ("RidingIndicatingRod.cfg"));	public static String itemName;	private String packageName;	public static void Debug(String s)	{		if (DebugMessage)		{			System.out.println((new StringBuilder()).append("ridingIndicatingRod-").append(s).toString());		}	}	public static void mDebug(String s)	{		if (DebugMessage				&& !ridingIndicatingRodInstance.isRelease())		{			System.out.println((new StringBuilder()).append("ridingIndicatingRod_").append(s).toString());		}	}	public boolean isRelease() {		return getPackage() == null;	}	public String getVersion() {		return "1.6.4-2a";	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {		ridingIndicatingRodInstance = this;		loadcfg();		itemName = "RidingIndicatingRod";		itemRidingIndicatingRod = new ItemRidingIndicatingRod(				ridingIndicatingRodID - 256).setUnlocalizedName(				itemName).setCreativeTab(CreativeTabs.tabMaterials);		LanguageRegistry.addName(itemRidingIndicatingRod, itemName);		GameRegistry.registerItem(itemRidingIndicatingRod, itemName);		itemRidingIndicatingRod.setTextureName("ridingindicatingrod:" + itemName);		GameRegistry.addRecipe(new ItemStack(itemRidingIndicatingRod, 1),				new Object[] { " Y ", "YXY", " Y ", Character.valueOf('X'),						Item.blazeRod, Character.valueOf('Y'), Item.redstone });	}	public static void writerList(String[] s, File file, List<String> list) {		//Listファイル書き込み		try {			BufferedWriter bwriter = new BufferedWriter(new FileWriter(file));			for (int i = 0; i < s.length ; i++)			{				//mDebug("s[i]="+s[i]);				if (s[i] != null) {					bwriter.write(s[i]);					list.add(s[i]);					bwriter.newLine();				}			}			bwriter.close();			Debug("file new file create.");		} catch (Exception e) {			Debug("file writer fail.");			e.printStackTrace();			Debug(" ");		}	}	public static void loadcfg() {		// cfg読み込み		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"ridingIndicatingRodID=17660", "useAddChatMessage=true", "useOriginalIcon=true"				};				Modchu_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				ridingIndicatingRodID = Integer.valueOf((Modchu_Config.loadConfig(mainCfgfile, "ridingIndicatingRodID", ridingIndicatingRodID)).toString());				useAddChatMessage = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useAddChatMessage", useAddChatMessage)).toString());				useOriginalIcon = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useOriginalIcon", useOriginalIcon)).toString());				cfgMaxMinCheck();				String k[] = {						"ridingIndicatingRodID", "useAddChatMessage", "useOriginalIcon"				};				String k1[] = {						""+ridingIndicatingRodID,""+useAddChatMessage, ""+useOriginalIcon				};				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}		}	}	public static void cfgMaxMinCheck() {		if (ridingIndicatingRodID < 0) ridingIndicatingRodID = 0;		if (ridingIndicatingRodID > 32000) ridingIndicatingRodID = 32000;	}	public String getPackage() {		if (packageName != null) return packageName;		Package pac = getClass().getPackage();		if (pac != null) {			packageName = pac.getName();			return packageName;		}		return packageName;	}}