package modchu.ridingindicatingrod;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import cpw.mods.fml.common.registry.GameData;import net.minecraft.item.Item;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_Item;import modchu.lib.characteristic.recompileonly.Modchu_CastHelper;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.replacepoint.ModchuModel_TextureManagerReplacePoint;public class modc_RidingIndicatingRod {	public static boolean useAddChatMessage = true;	public static boolean useOriginalIcon = true;	// ~164	public static int ridingIndicatingRodID = 17660;	public static Modchu_Item itemRidingIndicatingRod;	private static boolean DebugMessage = true;	private static modc_RidingIndicatingRod ridingIndicatingRodInstance;	private static File cfgdir;	private static File whiteListfile;	private static File ngListfile;	public static List<String> whiteList = new ArrayList<String>();	public static List<String> ngList = new ArrayList<String>();	private static File mainCfgfile;	public static String itemName;	private String packageName;	public String getVersion() {		return "3";	}	public void load() {		boolean debug = false;		cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/config/");		whiteListfile = new File(cfgdir, ("RidingIndicatingRod_whiteList.cfg"));		ngListfile = new File(cfgdir, ("RidingIndicatingRod_NGList.cfg"));		mainCfgfile = new File(cfgdir, ("RidingIndicatingRod.cfg"));		ridingIndicatingRodInstance = this;		loadcfg();		itemName = "RidingIndicatingRod";		Object item = new Modchu_Item(ItemRidingIndicatingRod.class, ridingIndicatingRodID);		//if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() item="+item);		item = Modchu_AS.get(Modchu_AS.itemSetUnlocalizedName, item, itemName);		item = Modchu_AS.get(Modchu_AS.itemSetCreativeTab, item, Modchu_AS.get(Modchu_AS.creativeTabsTabMaterials));		item = Modchu_AS.get(Modchu_AS.itemSetTextureName, item, itemName);		Modchu_Main.registerItem(item, itemName);		itemRidingIndicatingRod = (Modchu_Item) item;		Modchu_Main.languageRegistryAddName(item, itemName);		if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() itemRidingIndicatingRod="+itemRidingIndicatingRod);		//if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() blaze_rod="+Modchu_AS.get(Modchu_AS.getItem, "blaze_rod"));		//if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() redstone="+Modchu_AS.get(Modchu_AS.getItem, "redstone"));		if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() ItemStack="+Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item"), int.class }, new Object[]{ item, 1 }));		Modchu_Main.addRecipe(Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item"), int.class }, new Object[]{ item, 1 }),				new Object[] { " Y ", "YXY", " Y ", Character.valueOf('X'),			Modchu_AS.get(Modchu_AS.getItem, "blaze_rod"), Character.valueOf('Y'), Modchu_AS.get(Modchu_AS.getItem, "redstone") });		//Object o = cpw.mods.fml.common.registry.GameRegistry.findItem("mod_Modchu_ModchuLib", itemName);		//if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() o="+o);/*		if (debug) {			Map<String, Object> map = Modchu_Reflect.getAllFieldObject(item);			for (Entry<String, Object> en : map.entrySet()) {				String key = en.getKey();				Object o = en.getValue();				Modchu_Debug.mDebug("modc_RidingIndicatingRod load() getAllFieldObject key="+key+" o="+o);			}		}*/		//if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() e ="+itemRidingIndicatingRod.itemsList[256 + ridingIndicatingRodID]);		if (debug) Modchu_Debug.mDebug("modc_RidingIndicatingRod load() end.");	}	public boolean modEnabled() {		return true;	}	public static void loadcfg() {		// cfg読み込み		if (cfgdir.exists()) {			ArrayList list = new ArrayList();			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"useAddChatMessage=true", "useOriginalIcon=true"				};				if (Modchu_Main.getMinecraftVersion() < 170) list.add("ridingIndicatingRodID=17660");				for(String s1 : s) {					list.add(s1);				}				Modchu_Config.writerConfig(mainCfgfile, list);			} else {				// cfgファイルがある				useAddChatMessage = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useAddChatMessage", useAddChatMessage));				useOriginalIcon = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useOriginalIcon", useOriginalIcon));				if (Modchu_Main.getMinecraftVersion() < 170) ridingIndicatingRodID = Modchu_CastHelper.Int(Modchu_Config.loadConfig(mainCfgfile, "ridingIndicatingRodID", ridingIndicatingRodID));				String k[] = {						"useAddChatMessage", "useOriginalIcon"				};				String k1[] = {						""+useAddChatMessage, ""+useOriginalIcon				};				ArrayList list2 = new ArrayList();				if (Modchu_Main.getMinecraftVersion() < 170) {					list.add("ridingIndicatingRodID");					list2.add(""+ridingIndicatingRodID);				}				for(String s1 : k) {					list.add(s1);				}				for(String s1 : k1) {					list2.add(s1);				}				Modchu_Config.writerSupplementConfig(mainCfgfile, list, list2);			}		}	}}