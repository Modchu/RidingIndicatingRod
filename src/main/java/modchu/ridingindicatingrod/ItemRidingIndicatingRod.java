package modchu.ridingindicatingrod;import java.util.HashMap;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_ItemMasterBasis;import modchu.lib.Modchu_Reflect;public class ItemRidingIndicatingRod extends Modchu_ItemMasterBasis {	private Object setEntity;	public ItemRidingIndicatingRod(HashMap<String, Object> map) {		super(map);		setMaxStackSize(1);		setMaxDamage(30);	}	@Override	public int getColorFromItemStack(Object itemstack, int par1) {		return modc_RidingIndicatingRod.useOriginalIcon ? 16777215 : 0x22ff008c;	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase) {		if (Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityLivingBase)) {			//Modchu_Debug.mDebug("isRemote");			return true;		}		if(setEntity == null) {			setEntity = entityLivingBase;			Modchu_Debug.mDebug("setEntity entity.getClass()="+entityLivingBase.getClass());			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity.");			return true;		}		if(setEntity == entityLivingBase) {			//Modchu_Debug.mDebug("setEntity == entity get off.");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity == entity get off.");			if (entityLivingBase != null) Modchu_AS.set(Modchu_AS.entityMountEntity, entityLivingBase, null);			Object riddenByEntity = Modchu_AS.get(Modchu_AS.entityRiddenByEntity, entityLivingBase);			if (riddenByEntity != null) Modchu_AS.set(Modchu_AS.entityMountEntity, riddenByEntity, null);			return true;		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsDead, setEntity)) {			setEntity = null;			//Modchu_Debug.mDebug("setEntity.isDead");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity.isDead");			return true;		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsDead, entityLivingBase)) {			//Modchu_Debug.mDebug("entity.isDead");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod entity.isDead");			return true;		}		//Modchu_Debug.mDebug("riding set.");		if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod riding set.");		Modchu_AS.set(Modchu_AS.entityMountEntity, setEntity, entityLivingBase);		setEntity = null;		Modchu_AS.set(Modchu_AS.itemStackDamageItem, itemStack, 1, entityLivingBase);		return true;	}	@Override	public void onPlayerStoppedUsing(Object itemStack, Object world, Object entityPlayer, int i) {		if (Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityPlayer)) return;		int var6 = getMaxItemUseDuration(itemStack) - i;		float var7 = (float)var6 / 20.0F;		var7 = (var7 * var7 + var7 * 2.0F) / 3.0F;		//Modchu_Debug.mDebug("onPlayerStoppedUsing var7="+var7);		if ((double)var7 < 0.1D) return;		if (var7 > 1.0F) var7 = 1.0F;		if (var7 == 1.0F) {			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity reset.");			setEntity = null;		}	}	@Override	public Object onItemUseFinish(Object itemStack, Object world, Object entityPlayer) {		return itemStack;	}	@Override	public int getMaxItemUseDuration(Object itemStack) {		return 72000;	}	@Override	public Object getItemUseAction(Object itemStack) {		return Modchu_AS.getEnum(Modchu_AS.enumActionBow);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer) {		Modchu_AS.set(Modchu_AS.entityPlayerSetItemInUse, entityPlayer, itemStack, getMaxItemUseDuration(itemStack));		return itemStack;	}	@Override	public boolean hitEntity(Object itemStack, Object entityLivingBase, Object entityLivingBase2) {		Modchu_AS.set(Modchu_AS.entityLivingBaseHeal, entityLivingBase, 1.0F);		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2) ? itemInteractionForEntity(itemStack, entityLivingBase2, entityLivingBase) : itemInteractionForEntity(itemStack, null, entityLivingBase);	}	@Override	public void registerIcons(Object iIconRegister) {		//String name = modc_RidingIndicatingRod.useOriginalIcon ? Modchu_AS.getString(Modchu_AS.itemIconString, base) : "blazeRod";		//Modchu_Debug.mDebug("registerIcons name="+name);		//Object itemIcon = Modchu_AS.get(Modchu_AS.iIconRegisterRegisterIcon, iIconRegister, name);		//Modchu_Debug.mDebug("registerIcons itemIcon="+itemIcon);		//Modchu_AS.set(Modchu_AS.itemItemIcon, base, itemIcon);		Modchu_AS.set(Modchu_AS.itemItemIcon, base, Modchu_AS.get(Modchu_AS.iIconRegisterRegisterIcon, iIconRegister, modc_RidingIndicatingRod.useOriginalIcon ? Modchu_AS.getString(Modchu_AS.itemIconString, base) : "blazeRod"));	}}