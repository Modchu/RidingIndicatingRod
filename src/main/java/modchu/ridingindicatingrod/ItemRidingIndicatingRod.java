package modchu.ridingindicatingrod;import java.util.HashMap;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_ItemMasterBasis;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_TextureStitchedMaster;public class ItemRidingIndicatingRod extends Modchu_ItemMasterBasis {	private Object setEntity;	public ItemRidingIndicatingRod(HashMap<String, Object> map) {		super(map);		setMaxStackSize(1);		setMaxDamage(30);	}	@Override	public int getColorFromItemStack(Object itemstack, int par1) {		return modc_RidingIndicatingRod.useOriginalIcon ? 16777215 : 0x22ff008c;	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase) {		return itemInteractionForEntity(itemStack, entityPlayer, entityLivingBase, null);	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase, Object enumHand) {		Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity isRemote="+Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityLivingBase));		if (Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityLivingBase)) {			//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity isRemote");			return true;		}		if (setEntity == null) {			setEntity = entityLivingBase;			//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity setEntity entity.getClass()="+entityLivingBase.getClass());			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity.");			return true;		}		int version = Modchu_Main.getMinecraftVersion();		boolean flag = version > 189;		if (setEntity == entityLivingBase) {			//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity setEntity == entity get off.");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity == entity get off.");			if (entityLivingBase != null) {				if (flag) {					Object ridingEntity = Modchu_AS.get("Entity", "getRidingEntity", entityLivingBase);					Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity setEntity == entity get off. ridingEntity="+ridingEntity);					if (ridingEntity != null							&& !ridingEntity.equals(entityLivingBase)) {						Modchu_AS.set("Entity", "dismountRidingEntity", entityLivingBase);					} else {						Modchu_AS.set("Entity", "removePassengers", entityLivingBase);						Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity setEntity == entity get off. removePassengers");					}				} else {					Modchu_AS.getBoolean(Modchu_AS.entityStartRiding, entityLivingBase, null);					Object riddenByEntity = Modchu_AS.get(Modchu_AS.entityRiddenByEntity, entityLivingBase);					if (riddenByEntity != null) Modchu_AS.get(Modchu_AS.entityStartRiding, riddenByEntity, null);				}			}			return true;		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsDead, setEntity)) {			setEntity = null;			//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity setEntity.isDead");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity.isDead");			return true;		}		if (Modchu_AS.getBoolean(Modchu_AS.entityIsDead, entityLivingBase)) {			//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity entity.isDead");			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod entity.isDead");			return true;		}		//Modchu_Debug.mDebug("ItemRidingIndicatingRod itemInteractionForEntity riding set.");		Object riddenByEntity = Modchu_AS.get(Modchu_AS.entityRiddenByEntity, setEntity);		if (riddenByEntity != null) {			boolean flag1 = false;			if (setEntity.equals(entityLivingBase)) flag1 = true;			else if (flag) {				if (Modchu_AS.getBoolean("Entity", "isPassenger", new Class[]{ Modchu_Reflect.loadClass("Entity") }, setEntity, new Object[]{ entityLivingBase })) flag1 = true;			} else {				if (riddenByEntity.equals(entityLivingBase)) flag1 = true;			}			if (flag1) {				if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod riding not set.");				return true;			}		}		if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod riding set.");		Modchu_AS.get(Modchu_AS.entityStartRiding, setEntity, entityLivingBase, true);		setEntity = null;		Modchu_AS.set(Modchu_AS.itemStackDamageItem, itemStack, 1, entityLivingBase);		return true;	}	@Override	public void onPlayerStoppedUsing(Object itemStack, Object world, Object entityPlayer, int i) {		if (Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityPlayer)) return;		int var6 = getMaxItemUseDuration(itemStack) - i;		float var7 = (float)var6 / 20.0F;		var7 = (var7 * var7 + var7 * 2.0F) / 3.0F;		//Modchu_Debug.mDebug("onPlayerStoppedUsing var7="+var7);		if ((double)var7 < 0.1D) return;		if (var7 > 1.0F) var7 = 1.0F;		if (var7 == 1.0F) {			if (modc_RidingIndicatingRod.useAddChatMessage) Modchu_AS.set(Modchu_AS.printChatMessage, "RidingIndicatingRod setEntity reset.");			setEntity = null;		}	}	@Override	public Object onItemUseFinish(Object itemStack, Object world, Object entityPlayer) {		return itemStack;	}	@Override	public int getMaxItemUseDuration(Object itemStack) {		return 72000;	}	@Override	public Object getItemUseAction(Object itemStack) {		return Modchu_AS.getEnum(Modchu_AS.enumActionBow);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer) {		return onItemRightClick(itemStack, world, entityPlayer, null);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer, Object enumHand) {		Modchu_Debug.mDebug("ItemRidingIndicatingRod onItemRightClick enumHand="+enumHand);		int version = Modchu_Main.getMinecraftVersion();		boolean flag = version > 189;		if (flag) {			Modchu_AS.set("EntityLivingBase", "setActiveHand", new Class[]{ Modchu_Reflect.loadClass("EnumHand") }, entityPlayer, new Object[]{ enumHand });			Modchu_AS.set("EntityLivingBase", "swingArm", new Class[]{ Modchu_Reflect.loadClass("EnumHand") }, entityPlayer, new Object[]{ enumHand });		} else {			Modchu_AS.set(Modchu_AS.entityPlayerSetItemInUse, entityPlayer, itemStack, getMaxItemUseDuration(itemStack));		}		Object actionResult = flag ? Modchu_Reflect.newInstance("ActionResult", new Class[]{ Modchu_Reflect.loadClass("EnumActionResult"), Object.class }, new Object[]{ Modchu_AS.getEnum("EnumActionResult", "SUCCESS"), itemStack }) : itemStack;		return actionResult;	}	@Override	public boolean hitEntity(Object itemStack, Object entityLivingBase, Object entityLivingBase2) {		Modchu_AS.set(Modchu_AS.entityLivingBaseHeal, entityLivingBase, 1.0F);		int version = Modchu_Main.getMinecraftVersion();		boolean flag = version > 189;		if (flag) {			Object enumHand = Modchu_AS.get("EntityLivingBase", "getActiveHand", entityLivingBase);			return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2) ? itemInteractionForEntity(itemStack, entityLivingBase2, entityLivingBase, enumHand) : itemInteractionForEntity(itemStack, null, entityLivingBase, enumHand);		}		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2) ? itemInteractionForEntity(itemStack, entityLivingBase2, entityLivingBase) : itemInteractionForEntity(itemStack, null, entityLivingBase);	}	@Override	public void registerIcons(Object iIconRegister) {		int version = Modchu_Main.getMinecraftVersion();		Modchu_Main.registerIcons(base, iIconRegister,				modc_RidingIndicatingRod.useOriginalIcon ?				version < 160				&& Modchu_Main.isForge ? "modchulib:"+Modchu_AS.getString(Modchu_AS.itemIconString, base) : Modchu_AS.getString(Modchu_AS.itemIconString, base) : "minecraft:blazeRod");	}}